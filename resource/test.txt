i wanna eat lunch as soon as possible. it's time to eat!!
ごはん食べたい
Transformation	Meaning
map(func)	 Return a new distributed dataset formed by passing each element of the source through a function func.
filter(func)	 Return a new dataset formed by selecting those elements of the source on which func returns true.
flatMap(func)	 Similar to map, but each input item can be mapped to 0 or more output items (so func should return a Seq rather than a single item).
mapPartitions(func)	 Similar to map, but runs separately on each partition (block) of the RDD, so func must be of type Iterator[T] => Iterator[U] when running on an RDD of type T.
mapPartitionsWithIndex(func)	 Similar to mapPartitions, but also provides func with an integer value representing the index of the partition, so func must be of type (Int, Iterator[T]) => Iterator[U] when running on an RDD of type T.
sample(withReplacement, fraction, seed)	 Sample a fraction fraction of the data, with or without replacement, using a given random number generator seed.
union(otherDataset)	 Return a new dataset that contains the union of the elements in the source dataset and the argument.
distinct([numTasks]))	 Return a new dataset that contains the distinct elements of the source dataset.
groupByKey([numTasks])	 When called on a dataset of (K, V) pairs, returns a dataset of (K, Seq[V]) pairs. 
Note: By default, this uses only 8 parallel tasks to do the grouping. You can pass an optional numTasks argument to set a different number of tasks.
reduceByKey(func, [numTasks])	 When called on a dataset of (K, V) pairs, returns a dataset of (K, V) pairs where the values for each key are aggregated using the given reduce function. Like in groupByKey, the number of reduce tasks is configurable through an optional second argument.
sortByKey([ascending], [numTasks])	 When called on a dataset of (K, V) pairs where K implements Ordered, returns a dataset of (K, V) pairs sorted by keys in ascending or descending order, as specified in the boolean ascending argument.
join(otherDataset, [numTasks])	 When called on datasets of type (K, V) and (K, W), returns a dataset of (K, (V, W)) pairs with all pairs of elements for each key.
cogroup(otherDataset, [numTasks])	 When called on datasets of type (K, V) and (K, W), returns a dataset of (K, Seq[V], Seq[W]) tuples. This operation is also called groupWith.